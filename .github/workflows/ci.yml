# Adapted from https://github.com/BurntSushi/ripgrep/blob/master/.github/workflows/ci.yml

name: ci
on:
  pull_request:
  push:
    branches:
      - trunk
jobs:
  test:
    name: test
    env:
      # For some builds, we use cross to test on 32-bit and big-endian
      # systems.
      CARGO: cargo
      # When CARGO is set to CROSS, this is set to `--target matrix.target`.
      TARGET_FLAGS:
      # When CARGO is set to CROSS, TARGET_DIR includes matrix.target.
      TARGET_DIR: ./target
      # Emit backtraces on panics.
      RUST_BACKTRACE: 1
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build:
          # We test mekuteria on a pinned version of Rust, along with the moving
          # targets of 'stable' and 'beta' for good measure.
          - pinned
          - stable
          - beta
          # Our release builds are generated by a nightly compiler to take
          # advantage of the latest optimizations/compile time improvements. So
          # we test all of them here. (We don't do mips releases, but test on
          # mips for big-endian coverage.)
          - nightly
          - nightly-musl
          - nightly-32
          - nightly-mips
          - nightly-arm
          - macos
          - win-msvc
          - win-gnu
        include:
          - build: pinned
            os: ubuntu-22.04
            rust: 1.65.0
          - build: stable
            os: ubuntu-22.04
            rust: stable
          - build: beta
            os: ubuntu-22.04
            rust: beta
          - build: nightly
            os: ubuntu-22.04
            rust: nightly
          - build: nightly-musl
            os: ubuntu-22.04
            rust: nightly
            target: x86_64-unknown-linux-musl
          - build: nightly-32
            os: ubuntu-22.04
            rust: nightly
            target: i686-unknown-linux-gnu
          - build: nightly-mips
            os: ubuntu-22.04
            rust: nightly
            target: mips64-unknown-linux-gnuabi64
          - build: nightly-arm
            os: ubuntu-22.04
            rust: nightly
            # For stripping release binaries:
            # docker run --rm -v $PWD/target:/target:Z \
            #   rustembedded/cross:arm-unknown-linux-gnueabihf \
            #   arm-linux-gnueabihf-strip \
            #   /target/arm-unknown-linux-gnueabihf/debug/rg
            target: arm-unknown-linux-gnueabihf
          - build: macos
            os: macos-12
            rust: nightly
          - build: win-msvc
            os: windows-2022
            rust: nightly
          - build: win-gnu
            os: windows-2022
            rust: nightly-x86_64-gnu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install packages (Ubuntu)
        if: matrix.os == 'ubuntu-22.04'
        run: |
          ci/ubuntu-install-packages

      - name: Install packages (macOS)
        if: matrix.os == 'macos-12'
        run: |
          ci/macos-install-packages

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Use Cross
        if: matrix.target != ''
        run: |
          cargo install cross
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"

      - name: Build mekuteria and all crates
        run: ${{ env.CARGO }} build --verbose --workspace ${{ env.TARGET_FLAGS }}

      - name: Build mekuteria with PCRE2
        run: ${{ env.CARGO }} build --verbose --workspace --features pcre2 ${{ env.TARGET_FLAGS }}

      # This is useful for debugging problems when the expected build artifacts
      # (like shell completions and man pages) aren't generated.

      - name: Test for existence of build artifacts (Windows)
        if: matrix.os == 'windows-2022'
        shell: bash
        run: |
          outdir="$(ci/cargo-out-dir "${{ env.TARGET_DIR }}")"
          ls "$outdir/_rg.ps1" && file "$outdir/_rg.ps1"

      - name: Test for existence of build artifacts (Unix)
        if: matrix.os != 'windows-2022'
        shell: bash
        run: |
          outdir="$(ci/cargo-out-dir "${{ env.TARGET_DIR }}")"
          # TODO: Check for the man page generation here. For whatever reason,
          # it seems to be intermittently failing in CI. No idea why.
          # for f in rg.bash rg.fish rg.1; do
          for f in rg.bash rg.fish; do
            # We could use file -E here, but it isn't supported on macOS.
            ls "$outdir/$f" && file "$outdir/$f"
          done
  rustfmt:
    name: rustfmt
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt
      - name: Check formatting
        run: cargo fmt --all --check
